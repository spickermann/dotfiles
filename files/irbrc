# ruby 1.8.7 compatible
require 'rubygems'
require 'irb/completion'

# awesome print
begin
  require 'awesome_print'
  AwesomePrint.irb!
rescue LoadError => err
  warn "Couldn't load awesome_print: #{err}"
end

# configure irb prompt (see: http://tagaholic.me/2009/05/29/exploring-how-to-configure-irb.html#prompt)
IRB.conf[:PROMPT][:CUSTOM] = { :AUTO_INDENT => true,
                               :PROMPT_I    => "irb   > ",        # normal prompt
                               :PROMPT_S    => "irb  %l> ",       # prompt for continuated strings (%l is closing char)
                               :PROMPT_C    => "irb .(> ",        # prompt for continuated statement
                               :PROMPT_N    => "irb     ",        # prompt for indented code
                               :RETURN      => "irb  => %s\n" }   # format to return value

IRB.conf[:PROMPT_MODE] = :CUSTOM

# irb history
IRB.conf[:EVAL_HISTORY] = 1000
IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = File::expand_path("~/.irb_history")

# load .irbrc_rails in rails environments
railsrc_path = File.expand_path('~/.irbrc_rails')
if ( ENV['RAILS_ENV'] || defined? Rails ) && File.exist?( railsrc_path )
  begin
    load railsrc_path
  rescue Exception
    warn "Could not load: #{ railsrc_path } because of #{$!.message}"
  end
end

class Object
  def interesting_methods
    case self.class
    when Class
      self.public_methods.sort - Object.public_methods
    when Module
      self.public_methods.sort - Module.public_methods
    else
      self.public_methods.sort - Object.new.public_methods
    end
  end
  
  def time(&block) 
    puts Benchmark.measure(&block) 
  end
end
